--- a/lib/matplotlib/testing/decorators.py
+++ b/lib/matplotlib/testing/decorators.py
@@ -232,7 +232,7 @@ class _ImageComparisonBase:
                 # makes things more convenient for third-party users.
                 plt.close(fig)
             expected_path = self.copy_baseline(baseline, extension)
-            _raise_on_image_difference(expected_path, actual_path, self.tol)
+            return expected_path, actual_path, self.tol
 
 
 def _pytest_image_comparison(baseline_images, extensions, tol,
@@ -296,8 +296,11 @@ def _pytest_image_comparison(baseline_images, extensions, tol,
             assert len(figs) == len(our_baseline_images), (
                 "Test generated {} images but there are {} baseline images"
                 .format(len(figs), len(our_baseline_images)))
+            comparisonResults = []
             for fig, baseline in zip(figs, our_baseline_images):
-                img.compare(fig, baseline, extension, _lock=needs_lock)
+                comparisonResults.append(img.compare(fig, baseline, extension, _lock=needs_lock))
+            for comparisonResult in comparisonResults:
+                _raise_on_image_difference(*comparisonResult)
 
         parameters = list(old_sig.parameters.values())
         if 'extension' not in old_sig.parameters:
