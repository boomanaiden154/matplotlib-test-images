--- a/lib/matplotlib/testing/decorators.py
+++ b/lib/matplotlib/testing/decorators.py
@@ -198,7 +198,7 @@
         with lock:
             fig.savefig(actual_path, **kwargs)
             expected_path = self.copy_baseline(baseline, extension)
-            _raise_on_image_difference(expected_path, actual_path, self.tol)
+            return expected_path, actual_path, self.tol
 
 
 def _pytest_image_comparison(baseline_images, extensions, tol,
@@ -255,8 +255,11 @@
             assert len(plt.get_fignums()) == len(our_baseline_images), (
                 "Test generated {} images but there are {} baseline images"
                 .format(len(plt.get_fignums()), len(our_baseline_images)))
+            comparisonResults = []
             for idx, baseline in enumerate(our_baseline_images):
-                img.compare(idx, baseline, extension, _lock=needs_lock)
+                comparisonResults.append(img.compare(idx, baseline, extension, _lock=needs_lock))
+            for comparisonResult in comparisonResults:
+                _raise_on_image_difference(*comparisonResult)
 
         parameters = list(old_sig.parameters.values())
         if 'extension' not in old_sig.parameters:
